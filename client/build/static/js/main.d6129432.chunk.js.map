{"version":3,"sources":["components/NavBar.js","components/DeleteBtn/index.js","components/Jumbotron/index.js","utils/API.js","components/Grid/index.js","components/List/index.js","components/Form/index.js","components/pages/Tickets.js","components/pages/TicketDetails.js","components/pages/Customers.js","components/pages/CustomerDetails.js","components/pages/Materials.js","components/pages/MatDetails.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","NavbarText","DeleteBtn","role","tabIndex","Jumbotron","children","style","clear","paddingTop","textAlign","axios","get","id","delete","ticketData","post","customerData","materialData","Container","fluid","Row","Col","size","split","map","join","List","ListItem","Input","FormBtn","float","marginBottom","moment","require","Tickets","tickets","setTickets","formObject","setFormObject","customers","setCustomers","materials","setMaterials","loadTickets","API","then","res","data","catch","err","console","log","handleInputChange","event","target","name","value","useEffect","onChange","placeholder","width","height","ii","key","hidden","custName","_id","disabled","ticketNum","preventDefault","ticketDate","ticketCust","ticketMaterial","ticketTareWeight","ticketGrossWeight","ticketNetWeight","document","getElementById","reset","length","to","format","TicketDetails","useParams","Customers","loadCustomers","custStreet","custCity","custState","custZip","CustomerDetails","setLocations","locations","Materials","loadMaterials","price","notes","MatDetails","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d6129432.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText\r\n} from 'reactstrap';\r\n\r\nconst NavBar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand href=\"/\">HAMMER</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/Tickets\">Tickets</NavLink>              \r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/Customers\">Customers</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"/Materials\">Materials</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <NavbarText >Nathan Huber</NavbarText>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// The ...props means, spread all of the passed props onto this element\r\n// That way we don't have to define them all individually\r\nfunction DeleteBtn(props) {\r\n  return (\r\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\r\n      ✗\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default DeleteBtn;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ clear: \"both\", paddingTop: 50, textAlign: \"center\"}}\r\n      className=\"jumbotron\"\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import axios from \"axios\";\r\n\r\nexport default { \r\n   // Gets all tickets\r\n   getTickets: function() {\r\n     return axios.get(\"/Tickets\");\r\n  },\r\n  // Gets the ticket with the given id\r\n  getTicket: function(id) {\r\n    return axios.get(\"/Tickets/\" + id);\r\n  },\r\n  \r\n  // Deletes the ticket with the given id\r\n  deleteTicket: function(id) {\r\n    return axios.delete(\"/Tickets/\" + id);\r\n  },\r\n  // Saves a ticket to the database\r\n  saveTicket: function(ticketData) {\r\n    return axios.post(\"/Tickets\", ticketData);\r\n  },\r\n   // Gets all Customers\r\n   getCustomers: function() {\r\n     return axios.get(\"/Customers\");\r\n  },\r\n  // Gets the customer with the given id\r\n  getCustomer: function(id) {\r\n    return axios.get(\"/Customers/\" + id);\r\n  }, \r\n\r\n  getCustLocations: function(id) {\r\n    return axios.get(\"/Customers/\" + id + \"/locations\");\r\n  },\r\n  \r\n  \r\n  // Deletes the customer with the given id\r\n  deleteCustomer: function(id) {\r\n    return axios.delete(\"/Customers/\" + id);\r\n  },\r\n  // Saves a customer to the database\r\n  saveCustomer: function(customerData) {\r\n    return axios.post(\"/Customers\", customerData);\r\n  },\r\n // Gets all Materials\r\n  getMaterials: function() {\r\n    return axios.get(\"/Materials\");\r\n  },\r\n  // Gets the Material with the given id\r\n  getMaterial: function(id) {\r\n    return axios.get(\"/Materials/\" + id);\r\n  },\r\n  // Deletes the Material with the given id\r\n  deleteMaterial: function(id) {\r\n    return axios.delete(\"/materials/\" + id);\r\n  },\r\n  // Saves a Material to the database\r\n  saveMaterial: function(materialData) {\r\n    return axios.post(\"/materials\", materialData);\r\n  },\r\n\r\n};\r\n","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows me to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets me use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets me size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This file exports both the List and ListItem components\r\n\r\nexport function List({ children }) {\r\n  return (\r\n    <div className=\"list-overflow-container\">\r\n      <ul className=\"list-group\">{children}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ListItem({ children }) {\r\n  return <li className=\"list-group-item\">{children}</li>;\r\n}\r\n","import React from \"react\";\r\n\r\n// This file exports the Input, TextArea, and FormBtn components\r\n\r\nexport function Input(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input className=\"form-control\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function Select(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <Select className=\"form-control\" {...props} />\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport function TextArea(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <textarea className=\"form-control\" rows=\"20\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FormBtn(props) {\r\n  return (\r\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../DeleteBtn\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport { List, ListItem } from \"../List\";\r\nimport { Input, FormBtn } from \"../Form\";\r\n\r\nconst moment = require('moment');\r\n\r\nfunction Tickets(props) {\r\n  // Setting our component's initial state\r\n  const [tickets, setTickets] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n  const [customers, setCustomers] = useState([])\r\n  const [materials, setMaterials] = useState([])\r\n\r\n  console.log(\"Customer = \", customers)\r\n\r\n  // Load all tickets and store them with setTickets\r\n  useEffect(() => {\r\n    loadTickets()\r\n  }, [])\r\n\r\n  // Loads all tickets and sets them to tickets\r\n  function loadTickets() {\r\n    API.getTickets()\r\n      .then(res => \r\n        setTickets(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };  \r\n\r\n  // Load all Customers and store them with setCustomer\r\n  useEffect(() => {\r\n    loadCustomers()\r\n  }, [])\r\n\r\n  // Loads all customers and sets them to customers\r\n  function loadCustomers() {\r\n    API.getCustomers()\r\n    .then(res =>\r\n      setCustomers(res.data)\r\n    )\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  // Load all materials and store them with setMaterials\r\n  useEffect(() => {\r\n    loadMaterials()\r\n  }, [])\r\n\r\n  // Loads all materials and sets them to customers\r\n  function loadMaterials() {\r\n    API.getMaterials()\r\n    .then(res =>\r\n      setMaterials(res.data)\r\n    )\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a ticket from the database with a given id, then reloads tickets from the db\r\n  function deleteTicket(id) {\r\n    API.deleteTicket(id)\r\n      .then(res => loadTickets())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n // Handles updating component state when the user types into the input field\r\n function handleInputChange(event) {\r\n   const { name, value } = event.target;\r\n   setFormObject({...formObject, [name]: value})\r\n };\r\n\r\n \r\n // When the form is submitted, use the API.saveTicket method to save the ticket data\r\n// Then reload tickets from the database\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.ticketDate) {\r\n      API.saveTicket({\r\n        ticketDate: formObject.ticketDate,\r\n        ticketNum: formObject.ticketNum,\r\n        ticketCust: formObject.ticketCust,\r\n        ticketMaterial: formObject.ticketMaterial,\r\n        ticketTareWeight: formObject.ticketTareWeight,\r\n        ticketGrossWeight: formObject.ticketGrossWeight,\r\n        ticketNetWeight: formObject.ticketGrossWeight - formObject.ticketTareWeight\r\n      })\r\n        .then(res => loadTickets())\r\n        .catch(err => console.log(err));\r\n        document.getElementById(\"ticketFrm\").reset();  \r\n        setFormObject({})      \r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-6\">\r\n          <Jumbotron>\r\n            <h1>Add Ticket</h1>\r\n          </Jumbotron>\r\n          <form id=\"ticketFrm\">\r\n            <Input\r\n              onChange={handleInputChange}\r\n              name=\"ticketDate\"\r\n              placeholder=\"Date\"\r\n            />\r\n            <Input\r\n              onChange={handleInputChange}\r\n              name=\"ticketNum\"\r\n              placeholder=\"Ticket Number (required)\"\r\n            />          \r\n            <select onChange={handleInputChange}\r\n              name=\"ticketCust\"\r\n              style={{width: '100%', height: 35, marginBottom: 15}}>\r\n              {customers.map((customers, ii ) => (\r\n              <> \r\n               <option key={ii} value=\"\" hidden>Select Customer</option>\r\n               <option key={customers.custName}>{customers.custName}</option>  \r\n              </>   \r\n              ))}\r\n            </select>\r\n            <select onChange={handleInputChange}\r\n              name=\"ticketMaterial\"\r\n              style={{width: '100%', height: 35, marginBottom: 15}}>\r\n              {materials.map((materials, ii ) => (\r\n              <> \r\n               <option key={ii} value=\"\" hidden>Select Material</option>\r\n               <option key={materials._id}>{materials.name}</option>  \r\n              </>   \r\n              ))}\r\n            </select>\r\n            <Input\r\n              onChange={handleInputChange}\r\n              name=\"ticketTareWeight\"\r\n              placeholder=\"Tare Weight\"\r\n            /> \r\n            <Input\r\n              onChange={handleInputChange}\r\n              name=\"ticketGrossWeight\"\r\n              placeholder=\"Gross Weight\"\r\n            />          \r\n            <FormBtn\r\n              disabled={!(formObject.ticketNum)}\r\n              onClick={handleFormSubmit}>\r\n              Submit Ticket\r\n            </FormBtn>\r\n          </form>\r\n        </Col>\r\n        <Col size=\"md-6 sm-12\">\r\n            <Jumbotron>\r\n              <h1>Current Tickets</h1>\r\n            </Jumbotron>\r\n            {tickets.length ? (\r\n              <List>\r\n                {tickets.map(tickets => (\r\n                  <ListItem key={tickets._id}>\r\n                    <Link to={\"/Tickets/\" + tickets._id}>\r\n                      <strong>\r\n                      Ticket Date - {moment(tickets.ticketDate).format(\"MM-DD-YYYY\")}\r\n                        <br></br>\r\n                      Ticket# - {tickets.ticketNum}\r\n                      <br></br>\r\n                      {tickets.ticketCust}\r\n                      </strong>\r\n                    </Link>\r\n                    <DeleteBtn onClick={() => deleteTicket(tickets._id)}/>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            ) : (\r\n              <h3>No Results to Display</h3>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n}\r\n\r\nexport default Tickets;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\n\r\nconst moment = require('moment');\r\n\r\nfunction TicketDetails(props) {\r\n  const [tickets, setTickets] = useState({})\r\n  \r\n\r\n\r\n  // When this component mounts, grab the ticket with the _id of props.match.params.id\r\n  // e.g. localhost:3000/Tickets/599dcb67f0f16317844583fc\r\n  const {id} = useParams()\r\n  useEffect(() => {\r\n    API.getTicket(id)\r\n      .then(res => setTickets(res.data))\r\n      .catch(err => console.log(err));\r\n  }, [id])\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>\r\n            <strong>\r\n              Ticket # - {tickets.ticketNum}                      \r\n            </strong>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-10 md-offset-1\">\r\n          <article>\r\n            <h1>Ticket Details</h1>\r\n            <p>\r\n              <strong>\r\n                 <br></br>               \r\n                <p>\r\n                  {moment(tickets.ticketDate).format(\"MM-DD-YYYY\")}\r\n                    <br></br>\r\n                  Ticket # {tickets.ticketNum}\r\n                    <br></br>\r\n                    <br></br>\r\n                  Customer: &nbsp; {tickets.ticketCust}\r\n                    <br></br>\r\n                  Material: &nbsp;&nbsp;&nbsp; {tickets.ticketMaterial}\r\n                </p>                 \r\n                 <p>\r\n                 Tare Weight  &nbsp;&nbsp;&nbsp; -- &nbsp; {tickets.ticketTareWeight}\r\n                 <br></br>\r\n                 Gross Weight &nbsp; -- &nbsp; {tickets.ticketGrossWeight}\r\n                 <br></br>\r\n                 Net Weight  &nbsp;&nbsp;&nbsp;&nbsp; -- &nbsp; {tickets.ticketNetWeight}\r\n                 </p>\r\n                <br></br>\r\n               {tickets._id}\r\n               </strong>  \r\n            </p>\r\n          </article>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-2\">\r\n          <Link to=\"/Tickets\">← Back to Tickets</Link>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default TicketDetails","import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../DeleteBtn\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport { List, ListItem } from \"../List\";\r\nimport { Input, FormBtn } from \"../Form\";\r\n\r\nfunction Customers() {\r\n  //  Setting initial state\r\n  const [customers, setCustomers] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n\r\n  // Load all Customers and store them with setCustomer\r\n  useEffect(() => {\r\n    loadCustomers()\r\n  }, [])\r\n\r\n  // Loads all customers and sets them to customers\r\n  function loadCustomers() {\r\n    API.getCustomers()\r\n    .then(res =>\r\n      setCustomers(res.data)\r\n    )\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a Customer from the database with a fiven id, then reloads Customers\r\n  function deleteCustomer(id) {\r\n    API.deleteCustomer(id)\r\n      .then(res => loadCustomers())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // Handles updating component state when user types into the input field\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveCustomer method to save the data\r\n  // Then reload Cutomers from the database\r\n  function hadndleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.custName) {\r\n      API.saveCustomer({\r\n        custName: formObject.custName,\r\n        custStreet: formObject.custStreet,\r\n        custCity: formObject.custCity,\r\n        custState: formObject.custState,\r\n        custZip: formObject.custZip\r\n      })\r\n        .then(res => loadCustomers())\r\n        .catch(err => console.log(err));\r\n        document.getElementById(\"custFrm\").reset();\r\n        setFormObject({})        \r\n    }\r\n  };\r\n\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-6\">\r\n            <Jumbotron>\r\n              <h1>Add Customer</h1>\r\n            </Jumbotron>\r\n            <form id=\"custFrm\">\r\n              <Input \r\n                onChange={handleInputChange} \r\n                name=\"custName\" \r\n                placeholder=\"Customer Name (Required)\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"custStreet\"\r\n                placeholder=\"Street Address\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"custCity\"\r\n                placeholder=\"City\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"custState\"\r\n                placeholder=\"State\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"custZip\"\r\n                placeholder=\"Zip Code\"\r\n              />\r\n              <FormBtn\r\n                disabled={!(formObject.custName)}\r\n                onClick={hadndleFormSubmit}\r\n                >\r\n                  Submit Customer\r\n                </FormBtn>\r\n            </form>\r\n          </Col>\r\n          <Col size=\"md-6 sm-2\">\r\n            <Jumbotron>\r\n              <h1>Customers</h1>\r\n            </Jumbotron>\r\n              {customers.length ? (\r\n                <List>\r\n                  {customers.map(customers => (      \r\n                    <ListItem key={customers._id}>\r\n                      <Link to={\"/Customers/\" + customers._id}>\r\n                        <strong>\r\n                          {customers.custName}\r\n                        </strong>\r\n                      </Link>\r\n                      <DeleteBtn onClick={() => deleteCustomer(customers._id)} />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              ) : (      \r\n                <h3>No Results to Display</h3>\r\n              )}            \r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n\r\nexport default Customers;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction CustomerDetails(props) {\r\n  const [customers, setCustomers] = useState({})\r\n  const [locations, setLocations] = useState({})\r\n\r\n  // When this component mounts, grab the customer with the _id of props.match.params.id\r\n  // e.g. localhost:3000/Customers/599dcb67f0f16317844583fc\r\n  const {id} = useParams()\r\n  useEffect(() => {\r\n    API.getCustomer(id)\r\n      .then(res => setCustomers(res.data))      \r\n      .catch(err => console.log(err));\r\n  }, [id])\r\n\r\n  useEffect(() => {\r\n    API.getCustLocations(id)\r\n      .then(res => setLocations(res.data))\r\n      .catch(err => console.log(err));      \r\n  }, [id])\r\n\r\n\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>\r\n            <strong>\r\n              {customers.custName}                      \r\n            </strong>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-10 md-offset-1\">\r\n          <article>\r\n            <h1>Customer Details</h1>\r\n            <p>\r\n            <br></br>\r\n              <strong>{customers.custName}\r\n                  <br></br>\r\n                {customers.custStreet} \r\n                  <br></br>\r\n                {customers.custCity}, {customers.custState} &nbsp;{customers.custZip} \r\n                \r\n                  <br></br>\r\n                  <br></br>\r\n                Locations:</strong> {customers.locations}\r\n                  <br></br>                  \r\n                  <br></br>                  \r\n                {customers._id}\r\n              \r\n            </p>\r\n          </article>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-4\">\r\n          <Link to=\"/Customers\">← Back to Customers</Link>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default CustomerDetails","import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../DeleteBtn\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport { List, ListItem } from \"../List\";\r\nimport { Input, FormBtn } from \"../Form\";\r\n\r\nfunction Materials() {\r\n  //  Setting initial state\r\n  const [materials, setMaterials] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n\r\n  // Load all Materials and store them with setMaterial\r\n  useEffect(() => {\r\n    loadMaterials()\r\n  }, [])\r\n\r\n  // Loads all materials and sets them to materials\r\n  function loadMaterials() {\r\n    API.getMaterials()\r\n    .then(res =>\r\n      setMaterials(res.data)\r\n    )\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  // Deletes a Material from the database with a fiven id, then reloads Materials\r\n  function deleteMaterial(id) {\r\n    API.deleteMaterial(id)\r\n      .then(res => loadMaterials())\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // Handles updating component state when user types into the input field\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n  };\r\n\r\n  // When the form is submitted, use the API.saveMaterial method to save the data\r\n  // Then reload Materials from the database\r\n  function hadndleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.name) {\r\n      API.saveMaterial({\r\n        name: formObject.name,\r\n        price: formObject.price,\r\n        notes: formObject.notes\r\n      })\r\n        .then(res => loadMaterials())\r\n        .catch(err => console.log(err));\r\n        document.getElementById(\"matFrm\").reset();\r\n        setFormObject({}) \r\n    }\r\n  };\r\n\r\n    return (\r\n      <Container fluid>\r\n        <Row>\r\n          <Col size=\"md-6\">\r\n            <Jumbotron>\r\n              <h1>Add Materials</h1>\r\n            </Jumbotron>\r\n            <form id=\"matFrm\">\r\n              <Input \r\n                onChange={handleInputChange} \r\n                name=\"name\" \r\n                placeholder=\"Material Name (Required)\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"price\"\r\n                placeholder=\"Price\"\r\n              />\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"notes\"\r\n                placeholder=\"Notes\"\r\n              />\r\n              <FormBtn\r\n                disabled={!(formObject.name)}\r\n                onClick={hadndleFormSubmit}\r\n                >\r\n                  Submit Material\r\n                </FormBtn>\r\n            </form>\r\n          </Col>\r\n          <Col size=\"md-6 sm-2\">\r\n            <Jumbotron>\r\n              <h1>Materials</h1>\r\n            </Jumbotron>\r\n              {materials.length ? (\r\n                <List>\r\n                  {materials.map(materials => (      \r\n                    <ListItem key={materials._id}>\r\n                      <Link to={\"/Materials/\" + materials._id}>\r\n                        <strong>\r\n                          {materials.name}\r\n                        </strong>\r\n                      </Link>\r\n                      <DeleteBtn onClick={() => deleteMaterial(materials._id)} />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              ) : (      \r\n                <h3>No Results to Display</h3>\r\n              )}            \r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n\r\nexport default Materials;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../Grid\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport API from \"../../utils/API\";\r\n\r\nfunction MatDetails(props) {\r\n  const [materials, setMaterials] = useState({})\r\n\r\n  // When this component mounts, grab the customer with the _id of props.match.params.id\r\n  // e.g. localhost:3000/Materials/599dcb67f0f16317844583fc\r\n  const {id} = useParams()\r\n  useEffect(() => {\r\n    API.getMaterial(id)\r\n      .then(res => setMaterials(res.data))\r\n      .catch(err => console.log(err));\r\n  }, [id])\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1>\r\n            <strong>\r\n              {materials.name}                      \r\n            </strong>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-10 md-offset-1\">\r\n          <article>\r\n            <h1>Material Details</h1>\r\n            <p>\r\n              <strong>\r\n              {materials.name}\r\n              </strong>\r\n              <br></br>\r\n                {materials.price}\r\n              <br></br>\r\n                {materials.notes}\r\n              <br></br>\r\n                {materials._id}\r\n            </p>\r\n          </article>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-2\">\r\n          <Link to=\"/Materials\">← Back to Materials</Link>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default MatDetails","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport NavBar from './components/NavBar';\r\nimport Tickets from './components/pages/Tickets';\r\nimport TicketDetails from './components/pages/TicketDetails';\r\nimport Customers from './components/pages/Customers';\r\nimport CustomerDetails from './components/pages/CustomerDetails';\r\nimport Materials from './components/pages/Materials';\r\nimport MatDetails from './components/pages/MatDetails';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../src/components/App.css';\r\n\r\nfunction App()  {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <NavBar/>\r\n        <Switch>\r\n          <Route exact path={\"/tickets\"}>\r\n            <Tickets />\r\n          </Route>\r\n          <Route exact path={\"/tickets/:id\"}>\r\n            <TicketDetails />\r\n          </Route>\r\n          <Route exact path={\"/customers\"}>\r\n            <Customers />\r\n          </Route>\r\n          <Route exact path={\"/customers/:id\"}>\r\n            <CustomerDetails />\r\n          </Route>          \r\n          <Route exact path={\"/materials\"}>\r\n            <Materials />\r\n          </Route>\r\n          <Route exact path={\"/materials/:id\"}>\r\n            <MatDetails />\r\n          </Route>\r\n\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from '../src/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}